#!/usr/bin/env node

/**
 * Module dependencies.
 */

const debug = require('debug')('idcontrol-api:server');
const http = require('http');
const mongoose = require('mongoose');
const app = require('../app');


// const url = 'mongodb://idcontrol:shtspa22@ds121624.mlab.com:21624/idocntrol';


if (process.env.NODE_ENV !== 'production') {
  require('dotenv').load();
}

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
  * Get port from environment and store in Express.
  */

const port = normalizePort(process.env.PORT || '3977');
app.set('port', port);

/**
  * Create HTTP server.
  */

const server = http.createServer(app);


/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string'
    ? `Pipe ${port}`
    : `Port ${port}`;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(`${bind} requires elevated privileges`);
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(`${bind} is already in use`);
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string'
    ? `pipe ${addr}`
    : `port ${addr.port}`;
  debug(`Listening on ${bind}`);
}


function serverUp() {
/**
  * Listen on provided port, on all network interfaces.
  */

  server.listen(port, () => {
    console.log(`API REST Server -> http://localhost:${port}`);
  });
  server.on('error', onError);
  server.on('listening', onListening);
}


mongoose.connect(process.env.MONGO_URI, { useNewUrlParser: true, useCreateIndex: true }, (err) => {
  if (err) {
    console.log('No se puede conectar a la bd');
    throw err;
  } else {
    console.log('Connection to the database is established.');
    serverUp();
  }
});
